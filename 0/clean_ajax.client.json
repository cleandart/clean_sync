{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"kind":"class","name":"Error","id":"Error","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"safeToString","id":"safeToString1()","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_objectToString","id":"_objectToString1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"isPrivate":true,"line":"65"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"67"}],"uri":"dart-sdk/lib/core/errors.dart","line":"7"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:clean_ajax/client.dart","id":"clean_ajax.client","comment":"\nA library for efficient server-client communication that guarantees order of\nrequests and responses.\n\n## Examples\n\nFollowing example demonstrate simple usage of connection in browser. It is\nguaranteed that the first request finishes before the second.\n\n     import \"package:clean_ajax/client_browser.dart\";\n\n     var connection = createHttpConnection(\"http://www.example.com/api/\",\n                                           new Duration(milliseconds: 100));\n\n     connection.send(() => new ClientRequest(\"user/get\", {\"name\": \"John\"}))\n     .then((user) {\n       showUserInfo(user);\n     });\n\n     connection.send(() => new ClientRequest(\"user/get\", {\"name\": \"Peter\"}))\n     .then((user) {\n       showUserInfo(user);\n     });\n\nIt can be handy to send some requests periodically, for example to check the\nstate of the email inbox.\n\n     import \"package:clean_ajax/client_browser.dart\";\n\n     var connection = createHttpConnection(\"http://www.example.com/api/\",\n                                           new Duration(milliseconds: 100));\n\n     connection.sendPeriodically(() => new ClientRequest(\"inbox/get\", {}))\n     .listen((inbox) {\n       updateInbox(inbox);\n     });\n\nPeriodical requests are canceled simply by canceling the subscription to\nresults.\n\n     import \"package:clean_ajax/client_browser.dart\";\n\n     var connection = createHttpConnection(\"http://www.example.com/api/\",\n                                           new Duration(milliseconds: 100));\n\n     var subscription = connection.sendPeriodically(\n         () => new ClientRequest(\"inbox/get\", {})\n     ).listen((inbox) {\n       updateInbox(inbox);\n     });\n\n     // Stop sending requests when the inbox is closed by the user.\n     onInboxClose(() => subscription.cancel());\n\nReusal of code on server is encouraged by [LoopBackTransport] layer, that\nworks on the server.\n\n     import \"package:clean_ajax/client_backend.dart\";\n\n     var connection = createLoopBackConnection(requestHandler);\n\n     connection.send(() => new ClientRequest(\"user/get\", {\"name\": \"John\"}))\n     .then((user) {\n       showUserInfo(user);\n     });\n\n     connection.send(() => new ClientRequest(\"user/get\", {\"name\": \"Peter\"}))\n     .then((user) {\n       showUserInfo(user);\n     });\n\nHowever, [sendPeriodically] is not supported by [LoopBackTransport], it is\nnot error to call it on the server, however it gets send only first time and\nlater times when normal [send] is triggered.\n\n","children":[{"isFinal":true,"kind":"variable","name":"logger","id":"logger","line":"93"},{"superclass":{"name":"Transport","refId":"clean_ajax.client/Transport"},"kind":"class","name":"LoopBackTransport","id":"LoopBackTransport","comment":"\nTransport mechanism used on server, that directly uses [RequestHandler],\nused by [createLoopBackConnection].\n","children":[{"kind":"method","name":"markDirty","id":"markDirty0()","line":"481"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldSendLoopBackRequest","id":"_shouldSendLoopBackRequest0()","isPrivate":true,"line":"486"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_openRequest","id":"_openRequest0()","isPrivate":true,"line":"491"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_closeRequest","id":"_closeRequest0()","isPrivate":true,"line":"496"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"performRequest","id":"performRequest0()","comment":"\nBegins performing LoopBackRequest. Is not launched if another request is\nalready running or the request Queue is empty. Sets [_isRunning] as true\nfor the time this request is running and hooks up another request\nafter this one.\n","line":"507"},{"isFinal":true,"kind":"variable","name":"_sendLoopBackRequest","id":"_sendLoopBackRequest","comment":"\nRequestFactory is a function like LoopBackRequest.request() that returns\n[Future<LoopBackRequest>].\n","isPrivate":true,"line":"465"},{"isFinal":true,"kind":"variable","name":"_authenticatedUserId","id":"_authenticatedUserId","comment":"\nId of the user currently authenticated.\n","isPrivate":true,"line":"470"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isRunning","id":"_isRunning","comment":"\nIndicates whether a [LoopBackRequest] is currently on the way.\n","isPrivate":true,"line":"475"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isDirty","id":"_isDirty","isPrivate":true,"line":"477"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"_sendLoopBackRequest","refId":"clean_ajax.client/LoopBackTransport/_sendLoopBackRequest"},"kind":"param","name":"_sendLoopBackRequest","id":"_sendLoopBackRequest","isPrivate":true},{"defaultValue":"null","isOptional":true,"initializedField":{"name":"_authenticatedUserId","refId":"clean_ajax.client/LoopBackTransport/_authenticatedUserId"},"kind":"param","name":"_authenticatedUserId","id":"_authenticatedUserId","isPrivate":true}],"line":"479"}],"line":"460"},{"superclass":{"name":"Transport","refId":"clean_ajax.client/Transport"},"kind":"class","name":"HttpTransport","id":"HttpTransport","comment":"\nTransport mechanism using ajax polling used by [createHttpConnection].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_disconnect","id":"_disconnect0()","isPrivate":true,"line":"338"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_reconnect","id":"_reconnect0()","isPrivate":true,"line":"343"},{"kind":"method","name":"setHandlers","id":"setHandlers5()","children":[{"kind":"param","name":"prepareRequest","id":"prepareRequest"},{"kind":"param","name":"handleResponse","id":"handleResponse"},{"kind":"param","name":"handleError","id":"handleError"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"handleDisconnect","id":"handleDisconnect"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"handleReconnect","id":"handleReconnect"}],"line":"357"},{"kind":"method","name":"markDirty","id":"markDirty0()","comment":"\nNotifies [HttpTransport] instance that there are some requests to be sent\nand attempts to send them immediately. If a HttpRequest is already running,\nthe new requests will be sent in next \"iteration\" (after response is\nreceived + time interval _delayBetweenRequests passes).\n","line":"368"},{"kind":"method","name":"dispose","id":"dispose0()","comment":"\nMarks timer as disposed, which prevents him from future sending of http\nrequests.\n","line":"374"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldSendHttpRequest","id":"_shouldSendHttpRequest0()","isPrivate":true,"line":"378"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_openRequest","id":"_openRequest0()","isPrivate":true,"line":"380"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_closeRequest","id":"_closeRequest0()","isPrivate":true,"line":"384"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_buildRequest","id":"_buildRequest1()","children":[{"kind":"param","name":"data","id":"data"}],"isPrivate":true,"line":"388"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_performRequest","id":"_performRequest0()","comment":"\nBegins performing HttpRequest. Is not launched if another request is\nalready running ([_isRunning] is true) or the request Queue is empty,\n([_isDirty] is false). Sets [_isRunning] as true for the time this request\nis running and hooks up another request after this one with a delay of\n[_delayBetweenRequests].\n","isPrivate":true,"line":"414"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_sendDataRequest","id":"_sendDataRequest0()","isPrivate":true,"line":"419"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_sendPingRequest","id":"_sendPingRequest0()","isPrivate":true,"line":"442"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"timeout","id":"timeout","line":"355"},{"isFinal":true,"kind":"variable","name":"_sendHttpRequest","id":"_sendHttpRequest","comment":"\nRequestFactory is a function like HttpRequest.request() that returns\n[Future<HttpRequest>].\n","isPrivate":true,"line":"316"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_url","id":"_url","comment":"\nThe URL where to perform requests.\n","isPrivate":true,"line":"321"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isRunning","id":"_isRunning","comment":"\nIndicates whether a [HttpRequest] is currently on the way.\n","isPrivate":true,"line":"326"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"variable","name":"_delayBetweenRequests","id":"_delayBetweenRequests","comment":"\nTime interval between response to a request is received and next request\nis sent.\n","isPrivate":true,"line":"332"},{"ref":{"name":"Timer","refId":"dart.async/Timer"},"kind":"variable","name":"_timer","id":"_timer","isPrivate":true,"line":"334"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_connected","id":"_connected","isPrivate":true,"line":"336"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_timeout","id":"_timeout","comment":"\nSeconds after which request is declared as timed-out. Optional parameter.\nUse only with HttpRequest factories which support it. (Like the one in http_request.dart)\n","isPrivate":true,"line":"354"},{"kind":"constructor","name":"","id":"4()","children":[{"initializedField":{"name":"_sendHttpRequest","refId":"clean_ajax.client/HttpTransport/_sendHttpRequest"},"kind":"param","name":"_sendHttpRequest","id":"_sendHttpRequest","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_url","refId":"clean_ajax.client/HttpTransport/_url"},"kind":"param","name":"_url","id":"_url","isPrivate":true},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"initializedField":{"name":"_delayBetweenRequests","refId":"clean_ajax.client/HttpTransport/_delayBetweenRequests"},"kind":"param","name":"_delayBetweenRequests","id":"_delayBetweenRequests","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"initializedField":{"name":"_timeout","refId":"clean_ajax.client/HttpTransport/_timeout"},"kind":"param","name":"_timeout","id":"_timeout","isPrivate":true}],"line":"348"}],"line":"311"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Transport","id":"Transport","comment":"\nInterface implemented by various transport mechanisms used by [Connection]\nlike [HttpTransport] and [LoopBackTransport].\n","children":[{"kind":"method","name":"setHandlers","id":"setHandlers5()","children":[{"kind":"param","name":"prepareRequest","id":"prepareRequest"},{"kind":"param","name":"handleResponse","id":"handleResponse"},{"kind":"param","name":"handleError","id":"handleError"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"handleDisconnect","id":"handleDisconnect"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"handleReconnect","id":"handleReconnect"}],"line":"297"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markDirty","id":"markDirty0()","line":"305"},{"kind":"variable","name":"_prepareRequest","id":"_prepareRequest","isPrivate":true,"line":"291"},{"kind":"variable","name":"_handleResponse","id":"_handleResponse","isPrivate":true,"line":"292"},{"kind":"variable","name":"_handleError","id":"_handleError","isPrivate":true,"line":"293"},{"kind":"variable","name":"_reconnectConnection","id":"_reconnectConnection","isPrivate":true,"line":"294"},{"kind":"variable","name":"_disconnectConnection","id":"_disconnectConnection","isPrivate":true,"line":"295"}],"line":"290"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Connection","id":"Connection","comment":"\nRepresentation of connection to server.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_disconnect","id":"_disconnect0()","isPrivate":true,"line":"141"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_reconnect","id":"_reconnect0()","isPrivate":true,"line":"146"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"PackedRequest","refId":"clean_ajax.common/PackedRequest"}]},"kind":"method","name":"_prepareRequest","id":"_prepareRequest0()","isPrivate":true,"line":"193"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_handleResponse","id":"_handleResponse1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"responsesAndAuthUser","id":"responsesAndAuthUser"}],"isPrivate":true,"line":"216"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_handleError","id":"_handleError1()","children":[{"kind":"param","name":"error","id":"error"}],"isPrivate":true,"line":"235"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"send","id":"send1()","comment":"\nSchedule the send of [ClientRequest] created by factory function\n[createRequest].\n\nRequest will be created immediately before the send, that makes it possible\nto send always mostly actual requests.\n\nReturned [Future] completes with the value of response.\n","children":[{"ref":{"name":"CreateRequest","refId":"clean_ajax.client/CreateRequest"},"kind":"param","name":"createRequest","id":"createRequest"}],"line":"251"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"sendPeriodically","id":"sendPeriodically1()","comment":"\nSchedule the [ClientRequest]s to be sent periodically and return the\n[Stream] of responses.\n\nEvery time the transport layer notifies [Connection] about being ready to\nsend next request, [createRequest] is executed and resulting\n[ClientRequest] is send.\n\nSimilarly to [send], this method will notify the transport layer there is\nrequest to be sent. This notification happens only as direct consequence\nof calling [sendPeriodically], it won't happen multiple times for single\n[createRequest] factory.\n\nThe returned [Stream] can have only single listener, and periodical\nrequests are canceled when the subscription to results [Stream] is\ncanceled.\n","children":[{"ref":{"name":"CreateRequest","refId":"clean_ajax.client/CreateRequest"},"kind":"param","name":"createRequest","id":"createRequest"}],"line":"275"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isConnected","id":"isConnected","line":"133"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onDisconnected","id":"onDisconnected","line":"138"},{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"property","name":"onConnected","id":"onConnected","line":"139"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"authenticatedUserId","id":"authenticatedUserId","line":"153"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"onAuthenticatedUserIdChange","id":"onAuthenticatedUserIdChange","line":"158"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_connected","id":"_connected","comment":"\nFlag which marks whether there are problems with connection or no.\nIf this is false, automatic checker starts sending requests and when\na response arrives, then it is set back to true.\n","isPrivate":true,"line":"131"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"kind":"variable","name":"_onDisconnectedController","id":"_onDisconnectedController","isPrivate":true,"line":"135"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"kind":"variable","name":"_onConnectedController","id":"_onConnectedController","isPrivate":true,"line":"136"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_authenticatedUserId","id":"_authenticatedUserId","isPrivate":true,"line":"151"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_onAuthenticatedUserIdChangeController","id":"_onAuthenticatedUserIdChangeController","isPrivate":true,"line":"155"},{"ref":{"name":"Transport","refId":"clean_ajax.client/Transport"},"isFinal":true,"kind":"variable","name":"_transport","id":"_transport","isPrivate":true,"line":"160"},{"ref":{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"isFinal":true,"kind":"variable","name":"_requestQueue","id":"_requestQueue","comment":"\nQueue of unprepared [ClientRequest]s.\nThe map entry should contain these keys and values:\n  'createRequest': [CreateRequest] object\n  'completer': [Completer] object which returns response for the request\n","isPrivate":true,"line":"179"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"isFinal":true,"kind":"variable","name":"_periodicRequests","id":"_periodicRequests","isPrivate":true,"line":"181"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"Completer","refId":"dart.async/Completer"}]},"isFinal":true,"kind":"variable","name":"_responseMap","id":"_responseMap","comment":"\nMaps [Request] names to their future responses.\n","isPrivate":true,"line":"186"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"requestCount","id":"requestCount","comment":"\nCounts sent requests. Serves as unique ID for new requests.\n","line":"191"},{"kind":"constructor","name":"config","id":"config1()","comment":"\nDependency injection constructor of [Connection].\n\nIn majority of cases, you want to use either [createHttpConnection] or\n[createLoopBackConnection] factories from [clean_ajax.client_browser] and\n[clean_ajax.client_backend] libraries.\n","children":[{"ref":{"name":"Transport","refId":"clean_ajax.client/Transport"},"initializedField":{"name":"_transport","refId":"clean_ajax.client/Connection/_transport"},"kind":"param","name":"_transport","id":"_transport","isPrivate":true}],"line":"169"}],"line":"124"},{"returnType":{"name":"ClientRequest","refId":"clean_ajax.common/ClientRequest"},"kind":"typedef","name":"CreateRequest","id":"CreateRequest","line":"119"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"ResponseError","id":"ResponseError","children":[{"kind":"variable","name":"event","id":"event","line":"115"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"event","refId":"clean_ajax.client/ResponseError/event"},"kind":"param","name":"event","id":"event"}],"line":"116"}],"line":"114"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"ConnectionError","id":"ConnectionError","children":[{"kind":"variable","name":"event","id":"event","line":"110"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"event","refId":"clean_ajax.client/ConnectionError/event"},"kind":"param","name":"event","id":"event"}],"line":"111"}],"line":"109"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"CancelError","id":"CancelError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"106"},{"kind":"constructor","name":"","id":"0()","line":"105"}],"line":"104"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"FailedRequestException","id":"FailedRequestException","comment":"\nException thrown when the server does not respond to request or responds\nwith HTTP error code.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"101"},{"kind":"constructor","name":"","id":"0()","line":"100"}],"line":"99"}],"uri":"package:clean_ajax/client.dart","line":"81"}