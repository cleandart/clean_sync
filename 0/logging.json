{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Comparable","id":"Comparable","comment":"\nInterface used by types that have an intrinsic ordering.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","children":[{"ref":{"name":"T","refId":"dart.core/Comparable/T"},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"compare","id":"compare2()","comment":"\nA [Comparator] that compares one comparable to another.\n\nThis utility function is used as the default comparator\nfor ordering collections, for example in the [List] sort function.\n","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"b","id":"b"}],"line":"43"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/core/comparable.dart","line":"26"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:logging/logging.dart","id":"logging","comment":"\nSupport for logging.\n\nFor information on installing and importing this library, see the\n[logging package on pub.dartlang.org]\n(http://pub.dartlang.org/packages/logging).\n\n## Initializing\n\nBy default, the logging package does not do anything useful with the\nlog messages. You must configure the logging level and add a handler\nfor the log messages.\n\nHere is a simple logging configuration that logs all messages\nvia `print`.\n\n    Logger.root.level = Level.ALL;\n    Logger.root.onRecord.listen((LogRecord rec) {\n      print('${rec.level.name}: ${rec.time}: ${rec.message}');\n    });\n\nFirst, set the root [Level]. All messages at or above the level are\nsent to the [onRecord] stream.\n\nThen, listen on the [onRecord] stream for [LogRecord] events. The\n[LogRecord] class has various properties for the message, error,\nlogger name, and more.\n\n## Logging messages\n\nCreate a [Logger] with a unique name to easily identify the source\nof the log messages.\n\n    final Logger log = new Logger('MyClassName');\n\nHere is an example of logging a debug message and an error:\n\n    Future future = doSomethingAsync();\n    future.then((result) {\n      log.fine('Got the result: $result');\n      processResult(result);\n    })\n    .catchError((e, stackTrace) => log.severe('Oh noes!', e, stackTrace));\n\nSee the [Logger] class for the different logging methods.\n","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"variable","name":"_rootLevel","id":"_rootLevel","comment":"\nLevel for the root-logger. This will be the level of all loggers if\n[hierarchicalLoggingEnabled] is false.\n","isPrivate":true,"line":"66"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"hierarchicalLoggingEnabled","id":"hierarchicalLoggingEnabled","comment":"\nWhether to allow fine-grain logging and configuration of loggers in a\nhierarchy. When false, all logging is merged in the root logger.\n","line":"60"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"LogRecord","id":"LogRecord","comment":"\nA log entry representation used to propagate information from [Logger] to\nindividual [Handler]s.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"358"},{"ref":{"name":"Level","refId":"logging/Level"},"isFinal":true,"kind":"variable","name":"level","id":"level","line":"333"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"334"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"loggerName","id":"loggerName","comment":"Logger where this record is stored. ","line":"337"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"isFinal":true,"kind":"variable","name":"time","id":"time","comment":"Time when this record was created. ","line":"340"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"sequenceNumber","id":"sequenceNumber","comment":"Unique sequence number greater than all log records created before it. ","line":"343"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_nextNumber","id":"_nextNumber","isPrivate":true,"line":"345"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isFinal":true,"kind":"variable","name":"error","id":"error","comment":"Associated error (if any) when recording errors messages. ","line":"348"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isFinal":true,"kind":"variable","name":"stackTrace","id":"stackTrace","comment":"Associated stackTrace (if any) when recording errors messages. ","line":"351"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"initializedField":{"name":"level","refId":"logging/LogRecord/level"},"kind":"param","name":"level","id":"level"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"logging/LogRecord/message"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"loggerName","refId":"logging/LogRecord/loggerName"},"kind":"param","name":"loggerName","id":"loggerName"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"initializedField":{"name":"error","refId":"logging/LogRecord/error"},"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"initializedField":{"name":"stackTrace","refId":"logging/LogRecord/stackTrace"},"kind":"param","name":"stackTrace","id":"stackTrace","line":"354"}],"line":"353"}],"line":"332"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable","arguments":[{"name":"Level","refId":"logging/Level"}]}],"kind":"class","name":"Level","id":"Level","comment":"\n[Level]s to control logging output. Logging can be enabled to include all\nlevels above certain [Level]. [Level]s are ordered using an integer\nvalue [Level.value]. The predefined [Level] constants below are sorted as\nfollows (in descending order): [Level.SHOUT], [Level.SEVERE],\n[Level.WARNING], [Level.INFO], [Level.CONFIG], [Level.FINE], [Level.FINER],\n[Level.FINEST], and [Level.ALL].\n\nWe recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in [Level.ALL] and\n[Level.OFF].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"other","id":"other"}],"line":"317"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<","id":"<1()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"other","id":"other"}],"line":"318"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<=","id":"<=1()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"other","id":"other"}],"line":"319"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">","id":">1()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"other","id":"other"}],"line":"320"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">=","id":">=1()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"other","id":"other"}],"line":"321"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"other","id":"other"}],"line":"322"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"324"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"323"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"274"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"value","id":"value","comment":"\nUnique value for this level. Used to order levels, so filtering can exclude\nmessages whose level is under certain value.\n","line":"280"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"ALL","id":"ALL","comment":"Special key to turn on logging for all levels ([value] = 0). ","line":"285"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"OFF","id":"OFF","comment":"Special key to turn off all logging ([value] = 2000). ","line":"288"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"FINEST","id":"FINEST","comment":"Key for highly detailed tracing ([value] = 300). ","line":"291"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"FINER","id":"FINER","comment":"Key for fairly detailed tracing ([value] = 400). ","line":"294"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"FINE","id":"FINE","comment":"Key for tracing information ([value] = 500). ","line":"297"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"CONFIG","id":"CONFIG","comment":"Key for static configuration messages ([value] = 700). ","line":"300"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"INFO","id":"INFO","comment":"Key for informational messages ([value] = 800). ","line":"303"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"WARNING","id":"WARNING","comment":"Key for potential problems ([value] = 900). ","line":"306"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"SEVERE","id":"SEVERE","comment":"Key for serious failures ([value] = 1000). ","line":"309"},{"ref":{"name":"Level","refId":"logging/Level"},"isStatic":true,"kind":"variable","name":"SHOUT","id":"SHOUT","comment":"Key for extra debugging loudness ([value] = 1200). ","line":"312"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Level","refId":"logging/Level"}]},"isStatic":true,"kind":"variable","name":"LEVELS","id":"LEVELS","line":"314"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"logging/Level/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"value","refId":"logging/Level/value"},"kind":"param","name":"value","id":"value"}],"line":"282"}],"line":"272"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"LoggerHandler","id":"LoggerHandler","comment":"Handler callback to process log entries as they are added to a [Logger]. ","children":[{"kind":"param","name":"LogRecord","id":"LogRecord"}],"line":"258"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Logger","id":"Logger","comment":"\nUse a [Logger] to log debug messages. [Logger]s are named using a\nhierarchical dot-separated name convention.\n","children":[{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"level=","id":"level=1()","comment":"Override the level for this particular [Logger] and its children. ","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"value","id":"value"}],"line":"140"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clearListeners","id":"clearListeners0()","line":"160"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isLoggable","id":"isLoggable1()","comment":"Whether a message for [value]'s level is loggable in this logger. ","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"value","id":"value"}],"line":"172"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"log","id":"log4()","comment":"\nAdds a log record for a [message] at a particular [logLevel] if\n`isLoggable(logLevel)` is true.\n\nUse this method to create log entries for user-defined levels. To record a\nmessage at a predefined level (e.g. [Level.INFO], [Level.WARNING], etc) you\ncan use their specialized methods instead (e.g. [info], [warning], etc).\n","children":[{"ref":{"name":"Level","refId":"logging/Level"},"kind":"param","name":"logLevel","id":"logLevel"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace","line":"183"}],"line":"182"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"finest","id":"finest3()","comment":"Log message at level [Level.FINEST]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"201"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"finer","id":"finer3()","comment":"Log message at level [Level.FINER]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"205"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fine","id":"fine3()","comment":"Log message at level [Level.FINE]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"209"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"config","id":"config3()","comment":"Log message at level [Level.CONFIG]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"213"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"info","id":"info3()","comment":"Log message at level [Level.INFO]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"217"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"warning","id":"warning3()","comment":"Log message at level [Level.WARNING]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"221"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"severe","id":"severe3()","comment":"Log message at level [Level.SEVERE]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"225"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shout","id":"shout3()","comment":"Log message at level [Level.SHOUT]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"229"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"kind":"method","name":"_getStream","id":"_getStream0()","isPrivate":true,"line":"232"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_publish","id":"_publish1()","children":[{"ref":{"name":"LogRecord","refId":"logging/LogRecord"},"kind":"param","name":"record","id":"record"}],"isPrivate":true,"line":"243"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"fullName","id":"fullName","comment":"The full name of this logger, which includes the parent's full name. ","line":"78"},{"ref":{"name":"Level","refId":"logging/Level"},"kind":"property","name":"level","id":"level","comment":"\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n","line":"131"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"kind":"property","name":"onRecord","id":"onRecord","comment":"\nReturns an stream of messages added to this [Logger]. You can listen for\nmessages using the standard stream APIs, for instance:\n   logger.onRecord.listen((record) { ... });\n","line":"158"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isStatic":true,"kind":"property","name":"root","id":"root","comment":"Top-level root [Logger]. ","line":"250"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","comment":"Simple name of this logger. ","line":"75"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"parent","id":"parent","comment":"Parent of this logger in the hierarchy of loggers. ","line":"82"},{"ref":{"name":"Level","refId":"logging/Level"},"kind":"variable","name":"_level","id":"_level","comment":"Logging [Level] used for entries generated on this logger. ","isPrivate":true,"line":"85"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"isFinal":true,"kind":"variable","name":"_children","id":"_children","isPrivate":true,"line":"87"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"isFinal":true,"kind":"variable","name":"children","id":"children","comment":"Children in the hierarchy of loggers, indexed by their simple names. ","line":"90"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"LogRecord","refId":"logging/LogRecord"}]},"kind":"variable","name":"_controller","id":"_controller","comment":"Controller used to notify when log entries are added to this logger. ","isPrivate":true,"line":"93"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"isStatic":true,"isFinal":true,"kind":"variable","name":"_loggers","id":"_loggers","comment":"All [Logger]s in the system. ","isPrivate":true,"line":"253"},{"returnType":{"name":"Logger","refId":"logging/Logger"},"kind":"constructor","name":"","id":"1()","comment":"\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"99"},{"returnType":{"name":"Logger","refId":"logging/Logger"},"kind":"constructor","name":"_named","id":"_named1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"isPrivate":true,"line":"103"},{"kind":"constructor","name":"_internal","id":"_internal3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"logging/Logger/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Logger","refId":"logging/Logger"},"initializedField":{"name":"parent","refId":"logging/Logger/parent"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Logger","refId":"logging/Logger"}]},"kind":"param","name":"children","id":"children"}],"isPrivate":true,"line":"121"}],"line":"73"}],"uri":"package:logging/logging.dart","line":"51"}