{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"Set","id":"Set","comment":"\nA collection of objects in which each object can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or to _not_ be in the set.\n\nSet implementations may consider some elements indistinguishable. These\nelements are treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [LinkedHashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and\ndoesn't guarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n\nIt is generally not allowed to modify the set (add or remove elements) while\nan operation on the set is being performed, for example during a call to\n[forEach] or [containsAll]. Nor is it allowed to modify the set while\niterating either the set itself or any `Iterable` that is backed by the set,\nsuch as the ones returned by methods like [where] and [map].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if [value] is in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"59"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] into the set. Returns `true` if [value] was added to the set.\n\nIf [value] already exists, the set is not changed and `false` is returned.\n","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"value","id":"value"}],"line":"66"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"74"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"81"},{"returnType":{"name":"E","refId":"dart.core/Set/E"},"kind":"method","name":"lookup","id":"lookup1()","comment":"\nIf an object equal to [object] is in the set, return it.\n\nChecks if there is an object in the set that is equal to [object].\nIf so, that object is returned, otherwise returns null.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","comment":"\nRemoves each element of [elements] from this set.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll1()","comment":"\nRemoves all elements of this set that are not elements in [elements].\n\nChecks for each element of [elements] whether there is an element in this\nset that is equal to it (according to `this.contains`), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in `elements` are removed.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"104"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all elements of this set that satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"109"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"109"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"114"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"114"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","comment":"\nReturns whether this Set contains all the elements of [other].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"119"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"intersection","id":"intersection1()","comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of `other` according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"127"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"union","id":"union1()","comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"135"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"difference","id":"difference1()","comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other] according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"143"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all elements in the set.\n","line":"148"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be indistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","line":"37"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an empty identity [Set].\n\nThe created `Set` is a [LinkedHashSet] that uses identity as equality\nrelation.\n","line":"45"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"54"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/set.dart","line":"29"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Map","id":"Map","comment":"\nAn unordered collection of key-value pairs, from which you retrieve a value\nby using its associated key.\n\nEach key can occur at most once in a map.\n\nIt is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a [forEach] or [putIfAbsent] call.\nModifying the map while iterating the keys or values will also most likely\nbreak the iteration.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"109"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"114"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"122"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value"}],"line":"127"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\n    Map<String, int> scores = {'Bob': 36};\n    for (var key in ['Bob', 'Rohan', 'Sophena']) {\n      scores.putIfAbsent(key, () => key.length);\n    }\n    scores['Bob'];      // 36\n    scores['Rohan'];    //  5\n    scores['Sophena'];  //  7\n\nThe code that [ifAbsent] executes must not add or remove keys.\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"155"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"163"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all pairs from the map.\n","line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/core/map.dart","line":"175"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/map.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of [this].\n\nThe returned iterable has efficient `length` and `contains` operations,\nbased on [length] and [containsKey] of the map.\n","line":"183"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"property","name":"values","id":"values","comment":"\nThe values of [this].\n\nThe returned iterable has an efficient `length` method based on the\n[length] of the map.\n","line":"191"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of key-value pairs in the map.\n","line":"196"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no key-value pair in the map.\n","line":"201"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one key-value pair in the map.\n","line":"206"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates a Map instance with the default implementation, [LinkedHashMap].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","line":"26"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [LinkedHashMap] instance that contains all key-value pairs of\n[other].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an identity map with the default implementation, [LinkedHashMap].\n\nThe returned map allows `null` as a key.\n","line":"42"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a Map instance in which the keys and values are computed from the\n[iterable].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe example below creates a new Map from a List. The keys of `map` are\n`list` values converted to strings, and the values of the `map` are the\nsquares of the `list` values:\n\n    List<int> list = [1, 2, 3];\n    Map<String, int> map = new Map.fromIterable(list,\n        key: (item) => item.toString(),\n        value: (item) => item * item));\n\n    map['1'] + map['2']; // 1 + 4\n    map['3'] - map['2']; // 9 - 4\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n\nIn the following example, the keys and corresponding values of `map`\nare `list` values:\n\n    map = new Map.fromIterable(list);\n    map[1] + map[2]; // 1 + 2\n    map[3] - map[2]; // 3 - 2\n\nThe keys computed by the source [iterable] do not need to be unique. The\nlast occurrence of a key will simply overwrite any previous value.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.core/Map/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"}],"line":"80"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\n    List<String> letters = ['b', 'c'];\n    List<String> words = ['bad', 'cat'];\n    Map<String, String> map = new Map.fromIterables(letters, words);\n    map['b'] + map['c'];  // badcat\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"values","id":"values"}],"line":"103"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/core/map.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"kind":"class","name":"List","id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe default growable list, as returned by `new List()` or `[]`, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of [add] operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    List<int> fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error\n    fixedLengthList.add(499);    // Error\n    fixedLengthList[0] = 87;\n    List<int> growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.\n\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an `Iterable` that is backed by the list, will\nbreak the iteration.\n","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"136"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"142"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current length, entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"175"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    // Sort from shortest to longest.\n    numbers.sort((x, y) => x.length.compareTo(y.length));\n    numbers.join(', '); // 'one, two, four, three'\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n\n    List<int> nums = [13, 2, -11];\n    nums.sort();\n         nums.join(', '); // '-11, 2, 13'\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/core/list.dart","line":"199"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/core/list.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"199"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"\nShuffles the elements of this list randomly.\n","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"204"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the end of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.indexOf('re');    // 1\n    notes.indexOf('re', 2); // 3\n\nReturns -1 if [element] is not found.\n\n    notes.indexOf('fa');    // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"221"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.lastIndexOf('re', 2); // 1\n\nIf [start] is not provided, this method searches from the end of the\nlist./Returns\n\n    notes.lastIndexOf('re');  // 3\n\nReturns -1 if [element] is not found.\n\n    notes.lastIndexOf('fa');  // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"243"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this\nis a fixed-length list.\n","line":"252"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\n    List<String> list = ['a', 'b', 'c'];\n    list.setAll(1, ['bee', 'sea']);\n    list.join(', '); // 'a, bee, sea'\n\nThis operation does not increase the length of `this`.\n\nThe [index] must be non-negative and no greater than [length].\n\nThe [iterable] must not have more elements than what can fit from [index]\nto [length].\n\nIf `iterable` is based on this list, its values may change /during/ the\n`setAll` operation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"294"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the first occurence of [value] from this list.\n\nReturns true if [value] was in the list, false otherwise.\n\n    List<String> parts = ['head', 'shoulders', 'knees', 'toes'];\n    parts.remove('head'); // true\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nThe method has no effect if [value] was not in the list.\n\n    // Note: 'head' has already been removed.\n    parts.remove('head'); // false\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"313"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\nThe [index] must be in the range `0 ≤ index < length`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"328"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.removeWhere((item) => item.length == 3);\n    numbers.join(', '); // 'three, four'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"348"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"348"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.retainWhere((item) => item.length == 3);\n    numbers.join(', '); // 'one, two'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\nReturns a new list containing the objects from [start] inclusive to [end]\nexclusive.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    colors.sublist(1, 3); // ['green', 'blue']\n\nIf [end] is omitted, the [length] of `this` is used.\n\n    colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"377"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"getRange","id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    Iterable<String> range = colors.getRange(1, 4);\n    range.join(', ');  // 'green, blue, orange'\n    colors.length = 3;\n    range.join(', ');  // 'green, blue'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"396"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start], inclusive, to [end], exclusive, of the list.\n\n    List<int> list1 = [1, 2, 3, 4];\n    List<int> list2 = [5, 6, 7, 8, 9];\n    // Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n    // of list1.\n    list1.setRange(1, 3, list2, 3);\n    list1.join(', '); // '1, 8, 9, 4'\n\nThe [start] and [end] indices must satisfy `0 ≤ start ≤ end ≤ length`.\nIf [start] equals [end], this method has no effect.\n\nThe [iterable] must have enough objects to fill the range from `start`\nto `end` after skipping [skipCount] objects.\n\nIf `iterable` is this list, the operation will copy the elements originally\nin the range from `skipCount` to `skipCount + (end - start)` to the\nrange `start` to `end`, even if the two ranges overlap.\n\nIf `iterable` depends on this list in some other way, no guarantees are\nmade.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"422"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nThe [start] and [end] indices must be in the range\n`0 ≤ index ≤ length`, and `start ≤ end`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"433"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"441"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand inserts the contents of [replacement] in its place.\n\n    List<int> list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 4, [6, 7]);\n    list.join(', '); // '1, 6, 7, 5'\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"replacement","id":"replacement"}],"line":"453"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n\n    List<String> words = ['fee', 'fi', 'fo', 'fum'];\n    Map<int, String> map = words.asMap();\n    map[0] + map[1];   // 'feefi';\n    map.keys.toList(); // [0, 1, 2, 3]\n","line":"467"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","line":"149"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","line":"180"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a list of the given length.\n\nThe created list is fixed-length if [length] is provided.\n\n    List fixedLengthList = new List(3);\n    fixedLengthList.length;     // 3\n    fixedLengthList.length = 1; // Error\n\n\nThe list has length 0 and is growable if [length] is omitted.\n\n    List growableList = new List();\n    growableList.length; // 0;\n    growableList.length = 3;\n\nThe [length] must not be negative or null, if it is provided.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"73"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"filled","id":"filled2()","comment":"\nCreates a fixed-length list of the given length, and initializes the\nvalue at each position with [fill]:\n\n    new List<int>.filled(3, 0); // [0, 0, 0]\n\nThe [length] must not be negative or null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"fill","id":"fill"}],"line":"83"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"from","id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"93"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"generate","id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with [length] positions and fills it with values created by\ncalling [generator] for each index in the range `0` .. `length - 1`\nin increasing order.\n\n    new List<int>.generate(3, (int index) => index * index); // [0, 1, 4]\n\nThe created list is fixed-length unless [growable] is true.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/list.dart","line":"118"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable","line":"119"}],"line":"118"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/list.dart","line":"54"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]}],"kind":"class","name":"ListMixin","id":"ListMixin","comment":"\nBase implementation of a [List] class.\n\nThis class can be used as a mixin.\n\nThis implements all read operations using only the `length` and\n`operator[]` members. It implements write operations using those and\n`length=` and `operator[]=`\n\n*NOTICE*: Forwarding just these four operations to a normal growable [List]\n(as created by `new List()`) will give very bad performance for `add` and\n`addAll` operations of `ListBase`. These operations are implemented by\nincreasing the length of the list by one for each `add` operation, and\nrepeatedly increasing the length of a growable list is not efficient.\nTo avoid this, either override 'add' and 'addAll' to also forward directly\nto the growable list, or, if possible, use `DelegatingList` from\n\"package:collection/wrappers.dart\" instead.\n","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"50"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"52"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"52"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"82"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"93"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"93"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"104"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"104"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"115"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"115"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"128"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"128"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"141"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"141"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"162"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"191"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"191"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"193"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"193"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"195"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"195"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"198"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"198"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"198"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"207"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"219"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"225"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"227"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"227"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"231"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"253"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"257"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"278"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"278"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_filter","id":"_filter3()","children":[{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"283"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"283"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainMatching","id":"retainMatching","line":"284"}],"isPrivate":true,"line":"282"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"302"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"306"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"315"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"315"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"315"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"323"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"339"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"348"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"359"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"364"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"371"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"378"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"410"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"436"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"456"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"475"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"492"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"499"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"515"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"527"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"62"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"64"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"66"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"71"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"76"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"525"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"45"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"211"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"211"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"225"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"238"}],"line":"237"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"244"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"244"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"276"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"279"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"299"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"303"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"307"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"307"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"339"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"339"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"347"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"347"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"377"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of (some of) the elements of `this`.\n\nElements are represented by their own `toString` results.\n\nThe representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.\n\nIf the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.\n\nThe conversion may omit calling `toString` on some elements if they\nare known to now occur in the output, and it may stop iterating after\na hundred elements.\n","line":"403"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"291"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"293"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"311"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"319"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"331"},{"kind":"constructor","name":"","id":"0()","line":"205"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"202"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]}],"kind":"class","name":"IterableMixin","id":"IterableMixin","comment":"\nThis [Iterable] mixin implements all [Iterable] members except `iterator`.\n\nAll other methods are implemented in terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart"}],"uri":"dart-sdk/lib/core/function.dart"}]}],"line":"13"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"15"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"15"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"17"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"17"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"20"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"27"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"27"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"31"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"44"}],"line":"43"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"50"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"50"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"57"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"82"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"85"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"101"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"109"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"113"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"113"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"145"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"145"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"153"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"153"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"167"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"167"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"183"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"193"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"87"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"97"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"99"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"first","id":"first","line":"117"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"last","id":"last","line":"125"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"single","id":"single","line":"137"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"12"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"},{"kind":"library","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EfficientLength","id":"EfficientLength","comment":"\nMarker interface for [Iterable] subclasses that have an efficient\n[length] implementation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in the iterable.\n\nThis is an efficient operation that doesn't require iterating through\nthe elements.\n","line":"18"}],"uri":"dart-sdk/lib/_collection_dev/iterable.dart","line":"11"}],"uri":"dart-sdk/lib/_collection_dev/collection_dev.dart","line":"5"}],"kind":"library","name":"package:clean_data/clean_data.dart","id":"clean_data","comment":"\nSupport for automatical data synchronization among collections.\n\n## Concepts\n\n* __Changes__: You can easily attach listeners to all objects to detect\n  changes of their data. Changes are represented as [ChangeSet] or [Change]\n  instances. Changes are available through asynchronous [onChange] [Stream],\n  that does the work of grouping multiple changes that occured during\n  execution to single [ChangeSet] fired in the next event loop.\n\n* __DataMap__: Data are stored using a [Map] compatible instances of class\n  [DataMap].\n\n* __DataSet__: Multiple data objects can be stored and manipulated using\n  the instance of [DataSet] class. [DataSet] behave similarly\n  to [Set], each object can be contained at most once and no order is\n  guaranteed.\n\n* __Views__: You can easily create various read-only views of your data\n  using handy methods [filter], [map], [union], [except], [intersect]. Views\n  gets automatically updated when the underlying data change to always\n  reflect actual state.\n\n## Examples\n\nCreate simple data object and listen to its changes:\n\n    import 'package:clean_data/clean_data.dart';\n    void main() {\n      var person = new DataMap.from({\"name\": \"John\"});\n      person.onChange.listen((changeSet) => print(\"Person has changed!\"));\n\n      person['surname'] = 'Doe';\n      person['age'] = 37;\n    }\n\nThe above code outputs:\n\n    Person has changed!\n\nNotice that despite of two changes happened, we only one notification was\nfired.\n\nCreate simple set and listen to its changes:\n\n    import 'package:clean_data/clean_data.dart';\n    void main() {\n      var colleagues = new DataSet();\n      colleagues.onChange.listen((changeSet) => print(\"Team has changed!\"));\n\n      colleagues.add(new DataMap.from({\"name\": \"John\"}));\n      colleagues.add(new DataMap.from({\"name\": \"Peter\"}));\n\n    }\n\nThe above code outputs:\n\n    Team has changed!\n\nSimilarly to previous example, only one notification was fired.\n\nOur set also listens to changes in its underlying data objects:\n\n    import 'package:clean_data/clean_data.dart';\n    void main() {\n      var john = new DataMap.from({\"name\": \"John\"});\n      var peter = new DataMap.from({\"name\": \"Peter\"});\n\n      var colleagues = new DataSet.from([john, peter]);\n      colleagues.onChange.listen((changeSet) => print(\"Team has changed!\"));\n\n      john['surname'] = 'Doe';\n      peter['surname'] = 'Pan';\n\n    }\n\nThe above code outputs:\n\n    Team has changed!\n\nAgain, only one notification was fired.\n","children":[{"returnType":{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"},"kind":"method","name":"clone","id":"clone1()","children":[{"kind":"param","name":"data","id":"data"}],"uri":"package:clean_data/src/cleanify.dart","line":"48"},{"kind":"method","name":"_clone","id":"_clone1()","children":[{"kind":"param","name":"data","id":"data"}],"isPrivate":true,"uri":"package:clean_data/src/cleanify.dart","line":"44"},{"kind":"method","name":"decleanify","id":"decleanify1()","children":[{"kind":"param","name":"data","id":"data"}],"uri":"package:clean_data/src/cleanify.dart","line":"26"},{"kind":"method","name":"cleanify","id":"cleanify1()","children":[{"kind":"param","name":"data","id":"data"}],"uri":"package:clean_data/src/cleanify.dart","line":"7"},{"kind":"variable","name":"unset","id":"unset","uri":"package:clean_data/src/change_set.dart","line":"20"},{"kind":"variable","name":"undefined","id":"undefined","uri":"package:clean_data/src/change_set.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"}],"kind":"class","name":"ChangeValueNotificationsMixin","id":"ChangeValueNotificationsMixin","children":[{"kind":"method","name":"_clearChanges","id":"_clearChanges0()","isPrivate":true,"line":"207"},{"kind":"method","name":"_clearChangesSync","id":"_clearChangesSync0()","isPrivate":true,"line":"211"},{"kind":"method","name":"_markChanged","id":"_markChanged2()","children":[{"kind":"param","name":"oldValue","id":"oldValue"},{"kind":"param","name":"newValue","id":"newValue"}],"isPrivate":true,"line":"215"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_dispose","id":"_dispose0()","isPrivate":true,"line":"223"},{"ref":{"name":"Change","refId":"clean_data/Change"},"kind":"variable","name":"_change","id":"_change","isPrivate":true,"line":"204"},{"ref":{"name":"Change","refId":"clean_data/Change"},"kind":"variable","name":"_changeSync","id":"_changeSync","isPrivate":true,"line":"205"}],"uri":"package:clean_data/src/change_notifications_mixin.dart","line":"203"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"}],"kind":"class","name":"ChangeChildNotificationsMixin","id":"ChangeChildNotificationsMixin","children":[{"kind":"method","name":"_clearChanges","id":"_clearChanges0()","isPrivate":true,"line":"118"},{"kind":"method","name":"_clearChangesSync","id":"_clearChangesSync0()","isPrivate":true,"line":"123"},{"kind":"method","name":"_markAdded","id":"_markAdded2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"127"},{"kind":"method","name":"_markRemoved","id":"_markRemoved2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"139"},{"kind":"method","name":"_markChanged","id":"_markChanged2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"change","id":"change"}],"isPrivate":true,"line":"151"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addOnDataChangeListener","id":"_addOnDataChangeListener2()","comment":"\nStarts listening to changes on [dataObj].\n","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"171"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeOnDataChangeListener","id":"_removeOnDataChangeListener1()","children":[{"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"185"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_dispose","id":"_dispose0()","isPrivate":true,"line":"195"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"variable","name":"_change","id":"_change","comment":"\nHolds pending changes.\n","isPrivate":true,"line":"110"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"variable","name":"_changeSync","id":"_changeSync","isPrivate":true,"line":"111"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"}]},"kind":"variable","name":"_dataListeners","id":"_dataListeners","comment":"\nInternal set of listeners for change events on individual data objects.\n","isPrivate":true,"line":"116"}],"uri":"package:clean_data/src/change_notifications_mixin.dart","line":"105"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChangeNotificationsMixin","id":"ChangeNotificationsMixin","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_clearChanges","id":"_clearChanges0()","comment":"\nfollowing wanna-be-abstract methods must be overriden\n","isPrivate":true,"line":"24"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_clearChangesSync","id":"_clearChangesSync0()","isPrivate":true,"line":"25"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_onBeforeNotify","id":"_onBeforeNotify0()","isPrivate":true,"line":"26"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_notify","id":"_notify1()","comment":"\nStreams all new changes marked in [_change].\n","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"83"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_closeChangeStreams","id":"_closeChangeStreams0()","isPrivate":true,"line":"98"},{"kind":"property","name":"_change","id":"_change","comment":"\n[_change] and [_changeSync] are either of a type Change or ChangeSet depending\non concrete implementation of a mixin\n","isPrivate":true,"line":"18"},{"kind":"property","name":"_changeSync","id":"_changeSync","isPrivate":true,"line":"19"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[]},"kind":"property","name":"onBeforeAdd","id":"onBeforeAdd","comment":"\nStream populated with [DataMapView] events before any\ndata object is added.\n","line":"38"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[]},"kind":"property","name":"onBeforeRemove","id":"onBeforeRemove","comment":"\nStream populated with [DataMapView] events before any\ndata object is removed.\n","line":"50"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ChangeSet","refId":"clean_data/ChangeSet"}]},"kind":"property","name":"onChange","id":"onChange","comment":"\nStream populated with [ChangeSet] events whenever the collection or any\nof data object contained gets changed.\n","line":"64"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"property","name":"onChangeSync","id":"onChangeSync","comment":"\nStream populated with {'change': [ChangeSet], 'author': [dynamic]} events\nsynchronously at the moment when the collection or any data object contained\ngets changed.\n","line":"77"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[]},"kind":"variable","name":"_onChangeController","id":"_onChangeController","comment":"\nControlls notification streams. Used to propagate change events to the outside world.\n","isPrivate":true,"line":"9"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"variable","name":"_onChangeSyncController","id":"_onChangeSyncController","isPrivate":true,"line":"11"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[]},"kind":"variable","name":"_onBeforeAddedController","id":"_onBeforeAddedController","comment":"\nUsed to propagate change events to the outside world.\n","isPrivate":true,"line":"31"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[]},"kind":"variable","name":"_onBeforeRemovedController","id":"_onBeforeRemovedController","isPrivate":true,"line":"32"}],"uri":"package:clean_data/src/change_notifications_mixin.dart","line":"4"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"DataChangeListenersMixin","id":"DataChangeListenersMixin","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_markChanged","id":"_markChanged2()","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"changeSet","id":"changeSet"}],"isPrivate":true,"line":"5"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_notify","id":"_notify1()","children":[{"isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"6"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_onBeforeNotify","id":"_onBeforeNotify0()","comment":"\nRemoves listeners to all objects which have been removed and stacked in [_removedObjects]\n","isPrivate":true,"line":"20"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addOnDataChangeListener","id":"_addOnDataChangeListener2()","comment":"\nStarts listening to changes on [dataObj].\n","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"DataReference","refId":"clean_data/DataReference"},"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeAllOnDataChangeListeners","id":"_removeAllOnDataChangeListeners0()","comment":"\nStops listening to changes on [dataObj]\nSecond possibility is to add to [_removedObjects] and call [_onBeforeNotify]\n","isPrivate":true,"line":"45"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeOnDataChangeListener","id":"_removeOnDataChangeListener1()","children":[{"ref":{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"},"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"51"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"clean_data/DataChangeListenersMixin/T"}]},"kind":"variable","name":"_removedObjects","id":"_removedObjects","comment":"\nInternal Set of data objects removed from Collection that still have DataListener listening.\n","isPrivate":true,"line":"10"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"}]},"isFinal":true,"kind":"variable","name":"_dataListeners","id":"_dataListeners","comment":"\nInternal set of listeners for change events on individual data objects.\n","isPrivate":true,"line":"14"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"package:clean_data/src/data_change_listeners_mixin.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HashIndex","id":"HashIndex","comment":"\nReally simple inverted index implementation.\n","children":[{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"clean_data/HashIndex/E"}]},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns a set of objects that have this value. If no such\nobject exists, empty Set is returned.\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"31"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","comment":"\nAdds a [value] to [object] mapping to the index.\n","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"E","refId":"clean_data/HashIndex/E"},"kind":"param","name":"object","id":"object"}],"line":"38"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves a [value] to [object] mapping from the index.\n","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"E","refId":"clean_data/HashIndex/E"},"kind":"param","name":"object","id":"object"}],"line":"49"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"clean_data/HashIndex/E"}]}]},"kind":"variable","name":"_index","id":"_index","comment":"\nHolds the mapping of values to data objects.\n","isPrivate":true,"line":"25"},{"kind":"constructor","name":"","id":"0()","line":"20"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"package:clean_data/src/hash_index.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"NoIndexException","id":"NoIndexException","comment":"\nRepresents an exception that is raised when an unindexed object is\nattempted to be treated as an object.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"cause","id":"cause","line":"12"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"cause","refId":"clean_data/NoIndexException/cause"},"kind":"param","name":"cause","id":"cause"}],"line":"13"}],"uri":"package:clean_data/src/hash_index.dart","line":"11"},{"superclass":{"name":"TransformedDataList","refId":"clean_data/TransformedDataList"},"kind":"class","name":"SortedDataListView","id":"SortedDataListView","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatAddedItem","id":"_treatAddedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"28"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatRemovedItem","id":"_treatRemovedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"34"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatChangedItem","id":"_treatChangedItem3()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"c","id":"c"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"45"},{"kind":"variable","name":"_sorter","id":"_sorter","isPrivate":true,"line":"8"},{"kind":"variable","name":"_refmap","id":"_refmap","isPrivate":true,"line":"9"},{"kind":"constructor","name":"","id":"2()","children":[{"kind":"param","name":"source","id":"source"},{"initializedField":{"name":"_sorter","refId":"clean_data/SortedDataListView/_sorter"},"kind":"param","name":"_sorter","id":"_sorter","isPrivate":true}],"line":"11"},{"kind":"constructor","name":"fromKey","id":"fromKey2()","children":[{"kind":"param","name":"source","id":"source"},{"kind":"param","name":"key","id":"key"}],"line":"18"}],"uri":"package:clean_data/src/sets/sorted_list_view.dart","line":"7"},{"superclass":{"name":"TransformedDataSet","refId":"clean_data/TransformedDataSet"},"kind":"class","name":"MappedDataSetView","id":"MappedDataSetView","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatAddedItem","id":"_treatAddedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"17"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatRemovedItem","id":"_treatRemovedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"21"},{"kind":"variable","name":"_map","id":"_map","isPrivate":true,"line":"8"},{"kind":"variable","name":"_mapper","id":"_mapper","isPrivate":true,"line":"9"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source","id":"source"},{"initializedField":{"name":"_map","refId":"clean_data/MappedDataSetView/_map"},"kind":"param","name":"_map","id":"_map","isPrivate":true}],"line":"10"}],"uri":"package:clean_data/src/sets/mapped_set_view.dart","line":"7"},{"superclass":{"name":"FilteredDataSetBase","refId":"clean_data/FilteredDataSetBase"},"kind":"class","name":"UnionedDataSetView","id":"UnionedDataSetView","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"127"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data set from [source1] and [source2] with elements\nthat appear in at least one of the collections.\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source2","id":"source2","line":"125"}],"line":"124"}],"uri":"package:clean_data/src/sets/filtered_set_view.dart","line":"119"},{"superclass":{"name":"FilteredDataSetBase","refId":"clean_data/FilteredDataSetBase"},"kind":"class","name":"IntersectedDataSetView","id":"IntersectedDataSetView","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"115"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data set from [source1] and [source2] only with\nelements that appear in both collections.\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source2","id":"source2","line":"113"}],"line":"112"}],"uri":"package:clean_data/src/sets/filtered_set_view.dart","line":"107"},{"superclass":{"name":"FilteredDataSetBase","refId":"clean_data/FilteredDataSetBase"},"kind":"class","name":"ExceptedDataSetView","id":"ExceptedDataSetView","comment":"\nRepresents a read-only data set that is a result of an minus operation of two sets.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"101"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new data set from [source1] and [source2] only with elements that appear in A but not B.\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source1","id":"source1"},{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source2","id":"source2","line":"99"}],"line":"98"}],"uri":"package:clean_data/src/sets/filtered_set_view.dart","line":"93"},{"superclass":{"name":"FilteredDataSetBase","refId":"clean_data/FilteredDataSetBase"},"kind":"class","name":"FilteredDataSetView","id":"FilteredDataSetView","comment":"\nRepresents a read-only data set that is a result of a filtering\noperation on another collection.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"68"},{"kind":"method","name":"changeFilter","id":"changeFilter2()","children":[{"kind":"param","name":"newFilter","id":"newFilter"},{"ref":{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"},"defaultValue":"null","isOptional":true,"kind":"param","name":"newArgs","id":"newArgs"}],"line":"72"},{"kind":"variable","name":"_filter","id":"_filter","isPrivate":true,"line":"55"},{"ref":{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"},"kind":"variable","name":"_args","id":"_args","isPrivate":true,"line":"56"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"subscribtion","id":"subscribtion","line":"57"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreates a new filtered data set from [source], using [filter].\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"source","id":"source"},{"initializedField":{"name":"_filter","refId":"clean_data/FilteredDataSetView/_filter"},"kind":"param","name":"_filter","id":"_filter","isPrivate":true,"line":"62"},{"ref":{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"},"defaultValue":"null","isOptional":true,"initializedField":{"name":"_args","refId":"clean_data/FilteredDataSetView/_args"},"kind":"param","name":"_args","id":"_args","isPrivate":true,"line":"62"}],"line":"61"}],"uri":"package:clean_data/src/sets/filtered_set_view.dart","line":"53"},{"superclass":{"name":"TransformedDataSet","refId":"clean_data/TransformedDataSet"},"isAbstract":true,"kind":"class","name":"FilteredDataSetBase","id":"FilteredDataSetBase","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_shouldContain","id":"_shouldContain1()","comment":"\nReturns true if [dataObj] should be present in the set.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"isPrivate":true,"line":"23"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatItem","id":"_treatItem2()","comment":"\nDecides whether a [dataObj] that has changed in the [source] set\nshould be added/changed/removed in this filtered set.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changes","id":"changes"}],"isPrivate":true,"line":"29"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"DataSetView","refId":"clean_data/DataSetView"}]},"kind":"param","name":"sources","id":"sources"}],"line":"9"}],"uri":"package:clean_data/src/sets/filtered_set_view.dart","line":"7"},{"superclass":{"name":"DataListView+TransformedDataBase","refId":"clean_data/DataListView+TransformedDataBase"},"isAbstract":true,"kind":"class","name":"TransformedDataList","id":"TransformedDataList","comment":"\nRepresents a read-only, iterable list-like data collection that is a result of a transformation operation.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"22"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"}]},"kind":"param","name":"sources","id":"sources"}],"line":"12"}],"uri":"package:clean_data/src/sets/transformed_list_view.dart","line":"10"},{"superclass":{"name":"DataSetView+TransformedDataBase","refId":"clean_data/DataSetView+TransformedDataBase"},"isAbstract":true,"kind":"class","name":"TransformedDataSet","id":"TransformedDataSet","comment":"\nRepresents a read-only, iterable data collection that is a result of a transformation operation.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"22"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"}]},"kind":"param","name":"sources","id":"sources"}],"line":"12"}],"uri":"package:clean_data/src/sets/transformed_set_view.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"}],"kind":"class","name":"TransformedDataBase","id":"TransformedDataBase","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_mergeIn","id":"_mergeIn3()","comment":"\nReflects [changes] in the collection w.r.t. [config].\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changes","id":"changes"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"},{"isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"17"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatAddedItem","id":"_treatAddedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"29"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatRemovedItem","id":"_treatRemovedItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"30"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatChangedItem","id":"_treatChangedItem3()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"c","id":"c"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"sourceNumber","id":"sourceNumber"}],"isPrivate":true,"line":"31"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_treatItem","id":"_treatItem2()","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"kind":"param","name":"changeSet","id":"changeSet"}],"isPrivate":true,"line":"32"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"variable","name":"sources","id":"sources","comment":"\nThe source [ChangeNotificationsMixin](s) this collection is derived from.\n","line":"11"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"}]},"kind":"variable","name":"_sourcesSubscription","id":"_sourcesSubscription","isPrivate":true,"line":"12"}],"uri":"package:clean_data/src/sets/transformed_data_base.dart","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChangeSet","id":"ChangeSet","comment":"\nA representation of a change of map like object.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"104"},{"returnType":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"method","name":"clone","id":"clone0()","comment":"\nClone changeSet.\n","line":"126"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markAdded","id":"markAdded2()","comment":"\nMarks [key] as added with value [value].\n","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"line":"133"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markRemoved","id":"markRemoved2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"line":"137"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"markChanged","id":"markChanged2()","comment":"\nMarks all the changes in [ChangeSet] or [Change] for a\ngiven [dataObj].\n","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"change","id":"change"}],"line":"175"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"mergeIn","id":"mergeIn1()","comment":"\nMerges two [ChangeSet]s together.\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changeSet","id":"changeSet"}],"line":"201"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"213"},{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"property","name":"addedItems","id":"addedItems","line":"141"},{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"property","name":"removedItems","id":"removedItems","line":"151"},{"kind":"property","name":"strictlyChanged","id":"strictlyChanged","line":"161"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there are no changes in the [ChangeSet].\n","line":"210"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"variable","name":"changedItems","id":"changedItems","comment":"\nContains mapping between the changed children and respective changes.\n\nThe changes are represented either by [ChangeSet] object or by [Change].\n","line":"86"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates an empty [ChangeSet].\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"defaultValue":"const{}","isOptional":true,"kind":"param","name":"changedItems","id":"changedItems"}],"line":"92"},{"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates [ChangeSet] from [other]\n","children":[{"ref":{"name":"ChangeSet","refId":"clean_data/ChangeSet"},"kind":"param","name":"changeSet","id":"changeSet"}],"line":"99"}],"uri":"package:clean_data/src/change_set.dart","line":"79"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Change","id":"Change","comment":"\nA representation of a single change in a scalar value.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"equals","id":"equals1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"mergeIn","id":"mergeIn1()","comment":"\nApplies another [change] to get representation of whole change.\n","children":[{"ref":{"name":"Change","refId":"clean_data/Change"},"kind":"param","name":"change","id":"change"}],"line":"54"},{"returnType":{"name":"Change","refId":"clean_data/Change"},"kind":"method","name":"clone","id":"clone0()","comment":"\nClones the [change].\n","line":"68"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"72"},{"kind":"property","name":"isEmpty","id":"isEmpty","line":"29"},{"kind":"variable","name":"oldValue","id":"oldValue","line":"26"},{"kind":"variable","name":"newValue","id":"newValue","line":"27"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates new [Change] from information about the value before change\n[oldValue] and after the change [newValue].\n","children":[{"defaultValue":"unset","isOptional":true,"initializedField":{"name":"oldValue","refId":"clean_data/Change/oldValue"},"kind":"param","name":"oldValue","id":"oldValue"},{"defaultValue":"unset","isOptional":true,"initializedField":{"name":"newValue","refId":"clean_data/Change/newValue"},"kind":"param","name":"newValue","id":"newValue"}],"line":"37"}],"uri":"package:clean_data/src/change_set.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Undefined","id":"_Undefined","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"type","id":"type","line":"10"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"type","refId":"clean_data/_Undefined/type"},"kind":"param","name":"type","id":"type"}],"line":"12"}],"isPrivate":true,"uri":"package:clean_data/src/change_set.dart","line":"8"},{"superclass":{"name":"DataListView+ListMixin","refId":"clean_data/DataListView+ListMixin"},"interfaces":[{"name":"List","refId":"dart.core/List"}],"kind":"class","name":"DataList","id":"DataList","children":[{"kind":"method","name":"setLength","id":"setLength2()","children":[{"kind":"param","name":"newLen","id":"newLen"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"130"},{"isSetter":true,"kind":"method","name":"length=","id":"length=1()","children":[{"kind":"param","name":"newLen","id":"newLen"}],"line":"135"},{"isSetter":true,"kind":"method","name":"_length=","id":"_length=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLen","id":"newLen"}],"isPrivate":true,"line":"140"},{"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"line":"146"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","children":[{"kind":"param","name":"element","id":"element"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"156"},{"kind":"method","name":"set","id":"set3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"161"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"166"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"173"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"package:clean_data/src/data_list.dart","line":"181"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"181"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"package:clean_data/src/data_list.dart","line":"186"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"186"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_filter","id":"_filter3()","children":[{"ref":{"name":"DataList","refId":"clean_data/DataList"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"package:clean_data/src/data_list.dart","line":"193"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"193"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainMatching","id":"retainMatching","line":"194"}],"isPrivate":true,"line":"192"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear1()","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"203"},{"kind":"method","name":"removeLast","id":"removeLast1()","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"207"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"a","id":"a","uri":"package:clean_data/src/data_list.dart","line":"217"},{"kind":"param","name":"b","id":"b","uri":"package:clean_data/src/data_list.dart","line":"217"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"217"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"222"},{"returnType":{"name":"DataList","refId":"clean_data/DataList"},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"229"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"240"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"isOptional":true,"kind":"param","name":"fill","id":"fill"},{"isOptional":true,"kind":"param","name":"author","id":"author"}],"line":"247"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange5()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"},{"isOptional":true,"kind":"param","name":"author","id":"author"}],"line":"255"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"newContents","id":"newContents"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"266"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"kind":"param","name":"element","id":"element"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"292"},{"kind":"method","name":"removeAt","id":"removeAt2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"310"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"334"},{"kind":"constructor","name":"","id":"0()","line":"148"},{"returnType":{"name":"DataList","refId":"clean_data/DataList"},"kind":"constructor","name":"from","id":"from1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"}],"line":"150"}],"uri":"package:clean_data/src/data_list.dart","line":"128"},{"superclass":{"name":"Object+ChangeNotificationsMixin+ChangeChildNotificationsMixin+IterableMixin","refId":"clean_data/Object+ChangeNotificationsMixin+ChangeChildNotificationsMixin+IterableMixin"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable"}],"kind":"class","name":"DataListView","id":"DataListView","children":[{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"kind":"param","name":"key","id":"key"}],"line":"12"},{"returnType":{"name":"DataReference","refId":"clean_data/DataReference"},"kind":"method","name":"ref","id":"ref1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"pos","id":"pos"}],"line":"13"},{"kind":"method","name":"_silentAdd","id":"_silentAdd1()","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"22"},{"kind":"method","name":"_add","id":"_add1()","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"27"},{"kind":"method","name":"_set","id":"_set2()","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"33"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_remove","id":"_remove1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"isPrivate":true,"line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"56"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_beforeChangingAll","id":"_beforeChangingAll0()","isPrivate":true,"line":"65"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_afterChangingAll","id":"_afterChangingAll0()","isPrivate":true,"line":"72"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"80"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"84"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_sort","id":"_sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"a","id":"a","uri":"package:clean_data/src/data_list.dart","line":"86"},{"kind":"param","name":"b","id":"b","uri":"package:clean_data/src/data_list.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"line":"86"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_setRange","id":"_setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataReference","refId":"clean_data/DataReference"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"isPrivate":true,"line":"95"},{"kind":"property","name":"length","id":"length","line":"10"},{"kind":"property","name":"_length","id":"_length","isPrivate":true,"line":"11"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"property","name":"iterator","id":"iterator","line":"54"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"variable","name":"_list","id":"_list","isPrivate":true,"line":"9"},{"kind":"constructor","name":"","id":"0()","line":"51"}],"uri":"package:clean_data/src/data_list.dart","line":"8"},{"superclass":{"name":"Object+ChangeNotificationsMixin+ChangeValueNotificationsMixin","refId":"clean_data/Object+ChangeNotificationsMixin+ChangeValueNotificationsMixin"},"kind":"class","name":"DataReference","id":"DataReference","comment":"\nObservable object, which represents single primitive in Data.\n\n","children":[{"isSetter":true,"kind":"method","name":"value=","id":"value=1()","comment":"\nChange value of primitive type and notify listeners.\n","children":[{"kind":"param","name":"newValue","id":"newValue"}],"line":"28"},{"kind":"method","name":"_silentChangeValue","id":"_silentChangeValue1()","children":[{"kind":"param","name":"newValue","id":"newValue"}],"isPrivate":true,"line":"32"},{"kind":"method","name":"changeValue","id":"changeValue2()","children":[{"kind":"param","name":"newValue","id":"newValue"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"60"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"75"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"86"},{"kind":"property","name":"value","id":"value","comment":"\nReturn value of a primitive type.\n","line":"23"},{"kind":"variable","name":"_value","id":"_value","comment":"\nEncapsulated value\n","isPrivate":true,"line":"16"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_onDataChangeListener","id":"_onDataChangeListener","isPrivate":true,"line":"18"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_onDataChangeSyncListener","id":"_onDataChangeSyncListener","isPrivate":true,"line":"18"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates new DataReference with [value]\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"69"}],"uri":"package:clean_data/src/data_reference.dart","line":"11"},{"superclass":{"name":"DataSetView","refId":"clean_data/DataSetView"},"interfaces":[{"name":"Set","refId":"dart.core/Set"}],"kind":"class","name":"DataSet","id":"DataSet","comment":"\nSet\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"add","id":"add2()","comment":"\nAppends the [dataObj] to the set. If the element\nwas already in the set, [false] is returned and\nnothing happens.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"275"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll2()","comment":"\nAppends all [elements] to the set.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"285"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll2()","comment":"\nRemoves multiple data objects from the set.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"toBeRemoved","id":"toBeRemoved"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"292"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves a data object from the set.  If the object was not in\nthe set, returns [false] and nothing happens.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"301"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"removeBy","id":"removeBy3()","comment":"\nRemoves all objects that have [property] equal to [value] from this set.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"property","id":"property"},{"kind":"param","name":"value","id":"value"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"310"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeWhere","id":"_removeWhere2()","comment":"\nRemoves all objects satisfying filter [test]\n","children":[{"ref":{"name":"DataTestFunction","refId":"clean_data/DataTestFunction"},"kind":"param","name":"test","id":"test"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere2()","children":[{"ref":{"name":"DataTestFunction","refId":"clean_data/DataTestFunction"},"kind":"param","name":"test","id":"test"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"331"},{"kind":"method","name":"lookup","id":"lookup1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"336"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"}],"line":"338"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"package:clean_data/src/data_set.dart","line":"340"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"340"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"344"},{"returnType":{"name":"Set","refId":"dart.core/Set"},"kind":"method","name":"difference","id":"difference1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"param","name":"other","id":"other"}],"line":"349"},{"returnType":{"name":"Set","refId":"dart.core/Set"},"kind":"method","name":"intersection","id":"intersection1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"param","name":"other","id":"other"}],"line":"350"},{"returnType":{"name":"Set","refId":"dart.core/Set"},"kind":"method","name":"union","id":"union1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"param","name":"other","id":"other"}],"line":"351"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear1()","comment":"\nRemoves all data objects from the set.\n","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"356"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"362"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty set.\n","line":"256"},{"returnType":{"name":"DataSet","refId":"clean_data/DataSet"},"kind":"constructor","name":"from","id":"from1()","comment":"\nGenerates Set from [Iterable] of [data].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"data","id":"data"}],"line":"262"}],"uri":"package:clean_data/src/data_set.dart","line":"250"},{"superclass":{"name":"Object+IterableMixin+ChangeNotificationsMixin+ChangeChildNotificationsMixin","refId":"clean_data/Object+IterableMixin+ChangeNotificationsMixin+ChangeChildNotificationsMixin"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable"}],"kind":"class","name":"DataSetView","id":"DataSetView","comment":"\nObservable set of data objects that allows for read-only operations.\n\nBy observable we mean that changes to the contents of the set (data addition / change / removal)\nare propagated to registered listeners.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addIndex","id":"addIndex1()","comment":"\nAdds indices on chosen properties. Indexed properties can be\nused to retrieve data by their value with the [findBy] method,\nor removed by their value with the [removeBy] method.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"indexedProps","id":"indexedProps"}],"line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rebuildIndex","id":"_rebuildIndex1()","comment":"\n(Re)indexes all existing data objects into [prop] index.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"prop","id":"prop"}],"isPrivate":true,"line":"63"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_initIndexListener","id":"_initIndexListener0()","comment":"\nStarts listening synchronously on changes to the set\nand rebuilds the indices accordingly.\n","isPrivate":true,"line":"75"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"DataMapView","refId":"clean_data/DataMapView"}]},"kind":"method","name":"findBy","id":"findBy2()","comment":"\nFinds all objects that have [property] equal to [value] in this set.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"property","id":"property"},{"kind":"param","name":"value","id":"value"}],"line":"108"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true iff this set contains the given [dataObj].\n\n@param dataObj Data object to be searched for.\n","children":[{"kind":"param","name":"dataObj","id":"dataObj"}],"line":"127"},{"returnType":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"method","name":"liveWhere","id":"liveWhere2()","comment":"\nFilters the data set w.r.t. the given filter function [test].\n\nThe set remains up-to-date w.r.t. to the source set via\nbackground synchronization.\n","children":[{"kind":"param","name":"test","id":"test"},{"ref":{"name":"ChangeNotificationsMixin","refId":"clean_data/ChangeNotificationsMixin"},"defaultValue":"null","isOptional":true,"kind":"param","name":"args","id":"args"}],"line":"135"},{"returnType":{"name":"DataListView","refId":"clean_data/DataListView"},"kind":"method","name":"liveSort","id":"liveSort1()","comment":"\nSorts the data set with the given compare function.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"a","id":"a","uri":"package:clean_data/src/data_set.dart","line":"142"},{"kind":"param","name":"b","id":"b","uri":"package:clean_data/src/data_set.dart","line":"142"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"142"},{"returnType":{"name":"DataListView","refId":"clean_data/DataListView"},"kind":"method","name":"liveSortByKey","id":"liveSortByKey1()","comment":"\nSorts the data set by comparing keys generated by key function.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"key","id":"key","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"x","id":"x","uri":"package:clean_data/src/data_set.dart","line":"149"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"149"},{"returnType":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"method","name":"liveUnion","id":"liveUnion1()","comment":"\nUnions the data set with another [DataSetView] to form a new, [UnionedSetView].\n\nThe set remains up-to-date w.r.t. to the source set via\nbackground synchronization.\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"other","id":"other"}],"line":"160"},{"returnType":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"method","name":"liveIntersection","id":"liveIntersection1()","comment":"\nIntersects the data set with another [DataSetView] to form a new, [IntersectedSetView].\n\nThe set remains up-to-date w.r.t. to the source set via\nbackground synchronization.\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"other","id":"other"}],"line":"172"},{"returnType":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"method","name":"liveDifference","id":"liveDifference1()","comment":"\nMinuses the data set with another [DataSetView] to form a new, [ExceptedDataSetView].\n\nThe set remains up-to-date w.r.t. to the source set via\nbackground synchronization.\n\n","children":[{"ref":{"name":"DataSetView","refId":"clean_data/DataSetView"},"kind":"param","name":"other","id":"other"}],"line":"184"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"unattachListeners","id":"unattachListeners0()","line":"189"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","comment":"\nStream all new changes marked in [ChangeSet].\n","line":"197"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"204"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addAll","id":"_addAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"206"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_silentAddAll","id":"_silentAddAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"220"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeAll","id":"_removeAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"toBeRemoved","id":"toBeRemoved"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"233"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"property","name":"iterator","id":"iterator","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"27"},{"ref":{"name":"Set","refId":"dart.core/Set"},"isFinal":true,"kind":"variable","name":"_data","id":"_data","comment":"\nHolds data view objects for the set.\n","isPrivate":true,"line":"25"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"HashIndex","refId":"clean_data/HashIndex"}]},"isFinal":true,"kind":"variable","name":"_index","id":"_index","comment":"\nThe index on columns that speeds up retrievals and removals by property value.\n","isPrivate":true,"line":"34"},{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"variable","name":"_indexListenerSubscription","id":"_indexListenerSubscription","isPrivate":true,"line":"35"},{"isFinal":true,"kind":"variable","name":"StreamController_onBeforeAddedController","id":"StreamController_onBeforeAddedController","line":"117"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"isFinal":true,"kind":"variable","name":"_onBeforeRemovedController","id":"_onBeforeRemovedController","isPrivate":true,"line":"119"}],"uri":"package:clean_data/src/data_set.dart","line":"16"},{"kind":"typedef","name":"DataTransformFunction","id":"DataTransformFunction","children":[{"kind":"param","name":"d","id":"d"}],"uri":"package:clean_data/src/data_set.dart","line":"8"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"typedef","name":"DataTestFunction","id":"DataTestFunction","children":[{"kind":"param","name":"d","id":"d"}],"uri":"package:clean_data/src/data_set.dart","line":"7"},{"superclass":{"name":"DataMapView","refId":"clean_data/DataMapView"},"interfaces":[{"name":"Map","refId":"dart.core/Map"}],"kind":"class","name":"DataMap","id":"DataMap","comment":"\nA representation for a single unit of structured data.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add3()","comment":"\nAssigns the [value] to the [key] field.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"107"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll2()","comment":"\nAdds all key-value pairs of [other] to this data.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"other","id":"other"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"114"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_initAddAll","id":"_initAddAll1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"other","id":"other"}],"isPrivate":true,"line":"118"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addAll","id":"_addAll2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"other","id":"other"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"128"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssigns the [value] to the [key] field.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"line":"154"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves [key] from the data object.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"161"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll2()","comment":"\nRemove all [keys] from the data object.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"keys","id":"keys"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_removeAll","id":"_removeAll2()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"keys","id":"keys"},{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"isPrivate":true,"line":"173"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear1()","children":[{"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"author","id":"author"}],"line":"184"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"package:clean_data/src/data_map.dart","line":"188"},{"kind":"param","name":"value","id":"value","uri":"package:clean_data/src/data_map.dart","line":"188"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"188"},{"returnType":{"name":"DataReference","refId":"clean_data/DataReference"},"kind":"method","name":"ref","id":"ref1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"}],"line":"192"},{"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"202"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty data object.\n","line":"93"},{"returnType":{"name":"DataMap","refId":"clean_data/DataMap"},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a new data object from key-value pairs [data].\n","children":[{"kind":"param","name":"data","id":"data"}],"line":"98"}],"uri":"package:clean_data/src/data_map.dart","line":"87"},{"superclass":{"name":"Object+ChangeNotificationsMixin+ChangeChildNotificationsMixin","refId":"clean_data/Object+ChangeNotificationsMixin+ChangeChildNotificationsMixin"},"isAbstract":true,"kind":"class","name":"DataMapView","id":"DataMapView","children":[{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given key or null if key is not in the data object.\nBecause null values are supported, one should use containsKey to\ndistinguish between an absent key and a null value.\n","children":[{"kind":"param","name":"key","id":"key"}],"line":"15"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns whether this data object contains the given [key].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"key","id":"key"}],"line":"54"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"58"},{"returnType":{"name":"Map","refId":"dart.core/Map"},"kind":"method","name":"toJson","id":"toJson0()","comment":"\nConverts to Map.\n","line":"67"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns Json representation of the object.\n","line":"72"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","comment":"\nShould release all allocated (referenced) resources as subscribtions.\n","line":"77"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no {key, value} pair in the data object.\n","line":"20"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one {key, value} pair in the data object.\n","line":"27"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of data object.\n","line":"34"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"property","name":"values","id":"values","comment":"\nThe values of [DataMap].\n","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of {key, value} pairs in the [DataMap].\n","line":"47"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_fields","id":"_fields","isPrivate":true,"line":"9"}],"uri":"package:clean_data/src/data_map.dart","line":"7"}],"uri":"package:clean_data/clean_data.dart","line":"88"}